using FileInitializer;
using OwlTree;

namespace Unit;

public class PacketTests
{
    [Fact]
    public void LargeBuffer()
    {
        Logs.InitPath("logs/Packet/LargeBuffer");
        Logs.InitFiles("logs/Packet/LargeBuffer/Packets.log");
        
        var buffer = new byte[]{
            0x01, 0x00, 0x01, 0x00, 0x47, 0x57, 0xCD, 0xA2, 0x95, 0x01, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
            0x8A, 0x00, 0x00, 0x00, 0x0E, 0xB0, 0xB2, 0xA8, 0xCD, 0x2E, 0x6C, 0x40, 0xBE, 0x7D, 0x06, 0x4C, 0x60, 0x45, 0x0C, 0x8D, 0x5E, 0x05, 0x00, 0xF6, 0xFA, 0xEC, 0x2F, 0xCD, 0xCE, 0x13, 0x82, 0xDA, 0x5E, 0x9F, 0xFF, 0x85, 
            0xD9, 0x79, 0x42, 0x50, 0x03, 0x01, 0x00, 0x01, 0x00, 0xE7, 0x57, 0xCD, 0xA2, 0x95, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
            0x00, 0x8C, 0x00, 0x00, 0x00, 0x6A, 0x01, 0x00, 0x00, 0x14, 0xB0, 0xB2, 0xA8, 0xCD, 0xEC, 0xFB, 0xB7, 0x01, 0x02, 0x5E, 0x78, 0x45, 0xBF, 0xA6, 0x2C, 0x88, 0x65, 0x5D, 0x3B, 0x06, 0x4C, 0xB0, 0x22, 0x46, 0x00, 0xFE, 
            0xF6, 0xE2, 0x5F, 0x71, 0xEB, 0x24, 0x21, 0x98, 0xFD, 0xED, 0xC5, 0x3F, 0xEB, 0x56, 0x25, 0x21, 0x98, 0xFD, 0xED, 0xF9, 0x9F, 0x71, 0xEB, 0x25, 0x21, 0x98, 0xFD, 0xED, 0xF9, 0x5F, 0x71, 0xAB, 0x92, 0x10, 0xCC, 0xFE, 
            0xF6, 0xFC, 0x2F, 0xB8, 0x35, 0x5A, 0x42, 0x30, 0x03, 0x01, 0x00, 0x01, 0x00, 0x03, 0x59, 0xCD, 0xA2, 0x95, 0x01, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00, 0xAE, 0x01, 0x00, 0x00, 0x13, 0xB0, 0xB2, 0xA8, 0xCD, 0x2E, 0x6C, 0x80, 0x35, 0x03, 0x15, 0x4C, 0x88, 0x05, 0xCB, 0xB4, 0x6C, 0x3C, 0x80, 0x09, 0x2B, 0xC4, 0x88, 
            0x15, 0x00, 0xEE, 0xE6, 0xEC, 0x2F, 0xDA, 0x15, 0x9E, 0x10, 0xF4, 0xEE, 0xE6, 0xEC, 0x2F, 0xD9, 0x05, 0x4F, 0x08, 0x7A, 0x77, 0x73, 0xF6, 0x97, 0xED, 0x2A, 0x4F, 0x08, 0x7A, 0x77, 0x73, 0xFE, 0x17, 0xED, 0x82, 0x27, 
            0x04, 0xBD, 0xBB, 0x39, 0xFF, 0x4B, 0x76, 0xA5, 0x27, 0x04, 0xBD, 0xBB, 0x39, 0xFF, 0xCB, 0x76, 0xB5, 0x27, 0x04, 0x3D
        };

        var ReadPacket = new Packet(2042);
        int dataRemaining = -1;
        int dataLen = -1;

        int packetCount = 0;
        int packet1Len = 77;
        int packet2Len = 112;
        int packet3Len = 119;

        do {
            ReadPacket.Clear();

            int iters = 0;
            do {
                try
                {
                    if (dataRemaining <= 0)
                    {
                        dataLen = buffer.Length;
                        dataRemaining = dataLen;
                    }
                    dataRemaining -= ReadPacket.FromBytes(buffer, dataLen - dataRemaining);
                    iters++;
                }
                catch
                {
                    dataLen = -1;
                    break;
                }
            } while (ReadPacket.Incomplete && iters < 10);

            File.AppendAllText("logs/Packet/LargeBuffer/Packets.log", ReadPacket.ToString() + "\n\n");
            var len = ReadPacket.GetPacket().Length;

            if (packetCount == 0)
                Assert.True(len == packet1Len, $"1st packet is not {packet1Len} bytes, is instead {len}");
            else if (packetCount == 1)
                Assert.True(len == packet2Len, $"2nd packet is not {packet2Len} bytes, is instead {len}");
            else if (packetCount == 2)
                Assert.True(len == packet3Len, $"2nd packet is not {packet3Len} bytes, is instead {len}");

            packetCount++;

        } while (dataRemaining > 0);

        Assert.True(packetCount == 3, $"{packetCount} packets were read, not 3");
    }
}