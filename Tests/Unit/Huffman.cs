using FileInitializer;
using OwlTree;

namespace Unit;

public class HuffmanTests
{
    [Fact]
    public void DecompressionTest()
    {
        var compressed = new byte[] {
            0x01,0x00,0x01,0x00,0x30,0xB8,0x21,0xC1,0x95,0x01,0x00,0x00,0xA8,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xF9,
        0x09,0x00,0x00,0xCE,0x16,0x00,0x00,0x84,0xA0,0xC1,0x05,0x31,0xD0,0x43,0x84,0x0A,0x64,0xD8,0xA0,0xC3,0x07,0x84,0x18,0xA1,0xC4,0x09,0x56,0xB4,0xF0,0x62,0x06,0x70,
        0x23,0x87,0x1D,0x3F,0x08,0x32,0x44,0x91,0x23,0x48,0xB2,0x44,0x93,0x27,0x44,0x99,0xA2,0xCA,0x15,0xC8,0xB2,0xC5,0x97,0x30,0xB4,0xB9,0xC3,0x81,0x31,0xEE,0xE5,0x83,
        0x7D,0xFD,0xFC,0x0B,0xC8,0xC0,0x82,0x0E,0x26,0xC4,0xC2,0x86,0x1E,0x46,0x64,0x62,0x45,0x17,0x33,0x02,0x1B,0x3B,0xFA,0x18,0x92,0x91,0x25,0x9D,0x4C,0x89,0xC5,0x8D,
        0x3D,0x8E,0xCC,0xE4,0xCA,0x2E,0x67,0x86,0xCD,0x9D,0x7D,0x0E,0xCD,0xE8,0xD2,0x4E,0xA7,0xC6,0xEA,0xD6,0x5E,0xC7,0x66,0x76,0x6D,0xB7,0x73,0x83,0xDD,0xBD,0xFD,0x0E,
        0xCE,0xF0,0xE2,0x8E,0x27,0xC7,0xF2,0xE6,0x9E,0x47,0x67,0x7A,0x75,0xD7,0xB3,0xC3,0xF6,0xEE,0xBE,0x87,0x67,0x7C,0x79,0xE7,0xD3,0x63,0x7D,0x7B,0xEF,0xE3,0xAB,0x61,
        0xFE,0x03,0x74,0x49,0x31,0x80,0x02,0xFE,0x2C,0x30,0x21,0x41,0x00,0xEE,0xFE,0x90,0x89,0xA3,0x5B,0xD7,0xBF,0x1E,0x9C,0xBA,0xBB,0xFB,0xDB,0x4C,0xDE,0xDD,0x1F,0x32,
        0x75,0x74,0xEB,0xFA,0xD7,0x83,0x53,0x7F,0x77,0x7F,0x9B,0xE9,0xBB,0xFB,0x43,0x66,0x8E,0x6E,0x5D,0xFF,0x7A,0x70,0x1A,0xEE,0xEE,0x6F,0x33,0x7B,0x77,0x7F,0xC8,0xDC,
        0xD1,0xAD,0xEB,0x5F,0x0F,0x4E,0xE3,0xDD,0xFD,0x6D,0xE6,0xEF,0xEE,0x0F,0x59,0x38,0xBA,0x75,0xFD,0xEB,0xC1,0x69,0xBA,0xBB,0xBF,0xCD,0xE2,0xDD,0xFD,0x21,0x4B,0x47,
        0xB7,0xAE,0x7F,0x3D,0x38,0xCD,0x77,0xF7,0xB7,0x59,0xBE,0xBB,0x3F,0x64,0xE5,0xE8,0xD6,0xF5,0xAF,0x07,0xA7,0xE5,0xEE,0xFE,0x36,0xAB,0x77,0xF7,0x87,0xAC,0x1D,0xDD,
        0xBA,0xFE,0xF5,0xE0,0xB4,0xDE,0xDD,0xDF,0x66,0xFD,0xEE,0xFE,0x90,0x8D,0xA3,0x5B,0xD7,0xBF,0x1E,0x9C,0xB6,0xBB,0xFB,0xDB,0x6C,0xDE,0xDD,0x1F,0xB2,0x75,0x74,0xEB,
        0xFA,0xD7,0x83,0xD3,0x7E,0x77,0x7F,0x9B,0xED,0xBB,0xFB,0x43,0x76,0x8E,0x6E,0x5D,0xFF,0x7A,0x70,0x3A,0xEE,0xEE,0x6F,0xB3,0x7B,0x77,0x7F,0xC8,0xDE,0xD1,0xAD,0xEB,
        0x5F,0x0F,0x4E,0xE7,0xDD,0xFD,0x6D,0xF6,0xEF,0xEE,0x0F,0x39,0x38,0xBA,0x75,0xFD,0xEB,0xC1,0xE9,0xBA,0xBB,0xBF,0xCD,0xE1,0xDD,0xFD,0x21,0x47,0x47,0xB7,0xAE,0x7F,
        0x3D,0x38,0xDD,0x77,0xF7,0xB7,0x39,0xBE,0xBB,0x3F,0xE4,0xE4,0xE8,0xD6,0xF5,0xAF,0x07,0xA7,0xE7,0xEE,0xFE,0x36,0xA7,0x77,0xF7,0x87,0x9C,0x1D,0xDD,0xBA,0xFE,0xF5,
        0xE0,0xF4,0xDE,0xDD,0xDF,0xE6,0xFC,0xEE,0xFE,0x90,0x8B,0xA3,0x5B,0xD7,0xBF,0x1E,0x9C,0xBE,0xBB,0xFB,0xDB,0x5C,0xDE,0xDD,0x1F,0x72,0x75,0x74,0xEB,0xFA,0xD7,0x83,
        0xD3,0x7F,0x77,0x7F,0x9B,0xEB,0xBB,0xFB,0x43,0x6E,0x8E,0x6E,0x5D,0xFF,0x7A,0x70,0x06,0xEE,0xEE,0x6F,0x73,0x7B,0x77,0x7F,0xC8,0xDD,0xD1,0xAD,0xEB,0x5F,0x0F,0xCE,
        0xE0,0xDD,0xFD,0x6D,0xEE,0xEF,0xEE,0x0F,0x79,0x38,0xBA,0x75,0xFD,0xEB,0xC1,0x19,0xBA,0xBB,0xBF,0xCD,0xE3,0xDD,0xFD,0x21,0x4F,0x47,0xB7,0xAE,0x7F,0x3D,0x38,0xC3,
        0x77,0xF7,0xB7,0x79,0xBE,0xBB,0x3F,0xE4,0xE5,0xE8,0xD6,0xF5,0xAF,0x07,0x67,0xE4,0xEE,0xFE,0x36,0xAF,0x77,0xF7,0x87,0xBC,0x1D,0xDD,0xBA,0xFE,0xF5,0xE0,0x8C,0xDE,
        0xDD,0xDF,0xE6,0xFD,0xEE,0xFE,0x90,0x8F,0xA3,0x5B,0xD7,0xBF,0x1E,0x9C,0xB1,0xBB,0xFB,0xDB,0x7C,0xDE,0xDD,0x1F,0xF2,0x75,0x74,0xEB,0xFA,0xD7,0x83,0x33,0x7E,0x77,
        0x7F,0x9B,0xEF,0xBB,0xFB,0x43,0xFE,0x2E,0x4F,0xED,0xF5,0x6F,0x4E,0xF9,0xF2,0x54,0xAF,0x37,0xA7,0xE6,0xFE,0xE8,0x18,0xD7,0x9B,0xFB,0xFB,0xEB,0xE5,0xA9,0x5C,0x6F,
        0x6E,0xDF,0xBE,0xBC,0xB8,0xDE,0x1C,0x1C,0x5C,0x5E,0x5C,0x6F,0xCE,0xFF,0xF9,0xBF,0xBC,0xB8,0xDE,0x1C,0xD3,0x31,0x5D,0x5E,0x5C,0x6F,0xEE,0xEE,0x2E,0x2F,0xAE,0x37,
        0xC7,0x7C,0xCC,0x97,0x17,0xD7,0x9B,0xC3,0xC3,0xCB,0x8B,0xEB,0xCD,0xB1,0x1C,0xCB,0xE5,0xC5,0xF5,0xE6,0x58,0x8F,0xF5,0xF2,0xE2,0x7A,0x73,0x6C,0xC7,0x76,0x79,0x71,
        0xBD,0x39,0xF6,0x63,0xBF,0xBC,0xB8,0xDE,0x1C,0xC7,0x71,0x5C,0x5E,0x5C,0x6F,0x8E,0xF3,0x38,0x2F,0x2F,0xAE,0x37,0xC7,0x75,0x5C,0x97,0x17,0xD7,0x9B,0xE3,0x3E,0xEE,
        0xCB,0x8B,0xEB,0xCD,0xE5,0xE5,0xE5,0xC5,0xF5,0xE6,0x78,0x8E,0xE7,0xF2,0xE2,0x7A,0x73,0xBC,0xC7,0x7B,0x79,0x71,0xBD,0x39,0xBE,0xE3,0xBB,0xBC,0xB8,0xDE,0x1C,0x1D,
        0x5D,0x5E,0x5C,0x6F,0x8E,0xFF,0xF8,0x2F,0x4F,0xF5,0x7A,0x73,0x7E,0xE7,0x77,0x74,0x8C,0xEB,0xCD,0x09,0x9C,0xDF,0xCD,0xE5,0xA9,0x5C,0x6F,0x4E,0xF0,0x04,0x2E,0x2F,
        0xAE,0x37,0x27,0x74,0x82,0x97,0x17,0xD7,0x9B,0x63,0x9C,0xD0,0xE5,0xC5,0xF5,0xE6,0x84,0x8F,0x71,0x79,0x71,0xBD,0x39,0x91,0x13,0xBE,0xBC,0xB8,0xDE,0x9C,0xE8,0x89,
        0x5C,0x5E,0x5C,0x6F,0x4E,0xEC,0x44,0x2F,0x2F,0xAE,0x37,0x27,0x7E,0x62,0x97,0x17,0xD7,0x9B,0x93,0x38,0xF1,0xCB,0x8B,0xEB,0xCD,0x49,0x9E,0xC4,0xE5,0xC5,0xF5,0xE6,
        0xA4,0x4E,0xF2,0xF2,0xE2,0x7A,0x73,0xD2,0x27,0x75,0x79,0x71,0xBD,0x39,0x99,0x93,0xBE,0xBC,0xB8,0xDE,0x9C,0xEC,0xC9,0x5C,0x5E,0x5C,0x6F,0x4E,0xEE,0x64,0x2F,0x2F,
        0xAE,0x37,0x27,0x7F,0x72,0x97,0x17,0xD7,0x9B,0x53,0x38,0xF9,0xCB,0x8B,0xEB,0xCD,0x29,0x9E,0xC2,0xE5,0xC5,0xF5,0xE6,0xE2,0x14,0x2F,0x2F,0xAE,0x37,0xA7,0x74,0x71,
        0x79,0x71,0xBD,0x39,0xE5,0x53,0x3A};

        var original = new byte[]{
            0x01,0x00,0x01,0x00,0x30,0xB8,0x21,0xC1,0x95,0x01,0x00,0x00,0x19,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,
            0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xC5,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
            0x06,0x00,0x00,0x00,0x7B,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xC6,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xC7,0x00,
            0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,0x09,0x00,
            0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xC8,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xC9,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,
            0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x7D,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xCA,0x00,0x00,
            0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xCB,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,
            0x00,0x00,0x06,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xCC,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,
            0xCD,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,
            0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xCE,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xCF,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,
            0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xD0,
            0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xD1,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x81,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xD2,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,
            0x00,0x0B,0xD3,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x82,0x00,
            0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xD4,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xD5,0x00,0x00,0x00,0x18,0x00,0x00,0x00,
            0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x83,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
            0x05,0xD6,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xD7,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x84,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xD8,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,
            0x00,0x00,0x00,0x0B,0xD9,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
            0x85,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xDA,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xDB,0x00,0x00,0x00,0x18,0x00,
            0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x86,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,
            0x00,0x00,0x05,0xDC,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xDD,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x87,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xDE,0x00,0x00,0x00,0x09,0x00,0x00,
            0x00,0x04,0x00,0x00,0x00,0x0B,0xDF,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,
            0x00,0x00,0x88,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xE0,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xE1,0x00,0x00,0x00,
            0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x89,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
            0x04,0x00,0x00,0x00,0x05,0xE2,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xE3,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x8A,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xE4,0x00,0x00,0x00,0x09,
            0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xE5,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
            0x06,0x00,0x00,0x00,0x8B,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xE6,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xE7,0x00,
            0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x8C,0x00,0x00,0x00,0x09,0x00,
            0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xE8,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xE9,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,
            0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x8D,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xEA,0x00,0x00,
            0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xEB,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,
            0x00,0x00,0x06,0x00,0x00,0x00,0x8E,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xEC,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,
            0xED,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x8F,0x00,0x00,0x00,
            0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xEE,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xEF,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,
            0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xF0,
            0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xF1,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x91,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xF2,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,
            0x00,0x0B,0xF3,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x92,0x00,
            0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xF4,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xF5,0x00,0x00,0x00,0x18,0x00,0x00,0x00,
            0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x93,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
            0x05,0xF6,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0B,0xF7,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0xF8,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x04,
            0x00,0x00,0x00,0x0B,0xF9,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x31,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x30,0x00,0x00,0x00,
            0x14,0x00,0x00,0x00,0x3B,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x1E,0x00,0x00,0x00,
            0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x36,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
            0x02,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
            0x06,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x14,0x00,0x00,0x00,
            0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
            0x02,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,
            0x0A,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0x14,0x00,0x00,0x00,
            0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
            0x02,0x00,0x00,0x00,0x0D,0x00,0x00,0x00,0x0D,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,
            0x0E,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x14,0x00,0x00,0x00,
            0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
            0x02,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x12,0x00,0x00,0x00,
            0x12,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x14,0x00,0x00,0x00,
            0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
            0x02,0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x16,0x00,0x00,0x00,
            0x16,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x17,0x00,0x00,0x00,0x17,0x00,0x00,0x00,0x14,0x00,0x00,0x00,
            0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
            0x02,0x00,0x00,0x00,0x19,0x00,0x00,0x00,0x19,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x3B,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x1A,0x00,0x00,0x00,
            0x1A,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x1E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x1B,0x00,0x00,0x00,0x1A,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
            0x14,0x00,0x00,0x00,0x36,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x1B,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,
            0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x1D,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
            0x1E,0x00,0x00,0x00,0x1D,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x1F,0x00,0x00,0x00,0x1E,0x00,0x00,0x00,
            0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x1F,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,
            0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
            0x22,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x23,0x00,0x00,0x00,0x22,0x00,0x00,0x00,
            0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x23,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,
            0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
            0x26,0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x27,0x00,0x00,0x00,0x26,0x00,0x00,0x00,
            0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x27,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,
            0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x29,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
            0x2A,0x00,0x00,0x00,0x29,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x2B,0x00,0x00,0x00,0x2A,0x00,0x00,0x00,
            0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x2C,0x00,0x00,0x00,0x2B,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,
            0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x2D,0x00,0x00,0x00,0x2C,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
            0x2E,0x00,0x00,0x00,0x2D,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x2F,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,
            0x14,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x2F,0x00,0x00,0x00
        };

        var packet = new Packet(2048);
        packet.FromBytes(compressed, 0, compressed.Length);

        Assert.True(packet.header.compressionEnabled, "packet was not decoded with compression enabled, despite being compressed");

        Huffman.Decode(packet);

        var decompressed = packet.GetPacket();

        for (int i = 0; i < decompressed.Length; i++)
        {
            Assert.True(decompressed[i] == original[i], 
                $"decompressed packet doesn't match original at index {i}\ndecompressed: \n{BitConverter.ToString(decompressed.ToArray())}");
        }
    }

    [Fact]
    public void CompressionTest()
    {
        var original = new byte[] {
            0x01,0x00,0x01,0x00,0x85,0x9E,0xF9,0xAB,0x96,0x01,0x00,0x00,0x60,0x01,0x00,0x00,0x05,0x00,0x00,0x00,0xDF,0x2E,0xDF,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,
            0x00,0x00,0x00,0x2D,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x05,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x70,0xE9,0xBD,0x3E,0xDA,0xD5,0x6D,0xC0,0xE0,0x07,0xB4,0xBD,0x16,0x69,0xC2,0xBD,0x8A,0xE0,0xB4,0xBF,0xCF,
            0x82,0x8D,0xBD,0x1F,0x97,0xB3,0x43,0x31,0xA1,0xAB,0x40,0xBD,0x83,0x23,0x41,0x16,0x69,0xC2,0xBD,0x8A,0xE0,0xB4,0xBF,0xCF,0x82,0x8D,0xBD,0x40,0x00,0x00,0x00,0x3F,
            0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x76,0xB5,0x12,0x40,0xC2,0x2D,0x93,0xC0,0x00,0x5C,0x47,0x3B,0x08,0xB9,0x16,0x3D,0x74,
            0x81,0x69,0x3D,0x8C,0x75,0x91,0x3D,0x31,0xDD,0xB3,0x43,0x80,0xA0,0xB3,0x43,0xFC,0x8B,0x41,0x3E,0x08,0xB9,0x16,0x3D,0x74,0x81,0x69,0x3D,0x8C,0x75,0x91,0x3D,0x14,
            0x00,0x00,0x00,0x2D,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0xE0,0x01,0x40,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x05,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x90,0xF0,0xBC,0x3E,0x30,0xE5,0x6F,0xC0,0x68,0xDC,0xB6,0xBD,0x16,0x69,0xC2,0xBD,0x9E,0xFD,0xCD,0xBF,0xCF,
            0x82,0x8D,0xBD,0x95,0x80,0xB3,0x43,0xC4,0x84,0xB9,0x40,0x5F,0x1D,0x3B,0x41,0x16,0x69,0xC2,0xBD,0x9E,0xFD,0xCD,0xBF,0xCF,0x82,0x8D,0xBD,0x40,0x00,0x00,0x00,0x3F,
            0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x7C,0xDB,0x18,0x40,0x82,0x2D,0x93,0xC0,0x00,0x32,0x57,0x3B,0xE4,0xCA,0x00,0x3D,0xBC,
            0x03,0x16,0x3D,0xC0,0xE4,0x5A,0xBB,0x09,0xEC,0xB3,0x43,0x7D,0xD4,0xB3,0x43,0x31,0x1A,0xCB,0x3E,0xE4,0xCA,0x00,0x3D,0xBC,0x03,0x16,0x3D,0xC0,0xE4,0x5A,0xBB
        };

        var packet = new Packet(2048);
        packet.FromBytes(original, 0, original.Length);

        // var bytes = packet.GetMessages();
        // var histogram = Huffman.BuildHistogram(bytes, out var unique);
        // var tree = Huffman.BuildEncodingTree(histogram);

        // var treeByte = new byte[200];
        // int ind = 0;
        // tree.Encode(treeByte, ref ind);
        // int predict = tree.Size();

        // Assert.Fail($"\n\n\ntree: {tree.ToString()}\nprediction: {(predict/8) + 1}\nencodeLen: {(ind / 8) + 1}\nencode: {BitConverter.ToString(treeByte)}\n\n\n");

        Huffman.Encode(packet);

        var p = packet.GetPacket();

        Assert.True(original.Length == p.Length, "Packet length was changed from original even though compression should have failed. should have been " + original.Length + " instead got " + p.Length);

        for (int i = 0; i < original.Length; i++)
        {
            if (p[i] != original[i])
                Assert.Fail($"packet does not match original at byte {i}, packet:\n{BitConverter.ToString(p.ToArray())}");
        }
    }

    /*
    1  2  3  4  5  6  7  8  9  10 11 12 13 14 16 17 18 19 20

    40-DE-2D-2D-04-D2-E7-0F-36-FE-F5-39-38-C9-0D-38-40-82-06-
    22-A4-00-B5-D2-59-17-90-81-15-65-1C-89-93-3D-DD-AD-CC-E6-
    FD-4C-28-21-46-0D-B0-E3-87-23-61-28-F3-C8-AB-5C-F8-15-CD-
    B6-6F-84-6B-27-DF-3E-38-98-D0-C5-90-AC-7C-29-E8-50-5C-5D-
    AB-6D-62-2E-A7-B6-BA-36-E0-76-6E-BB-97-33-3D-BB-F0-F9-F7-
    50-B0-F0-5E-2C-38-64-DA-59-02-7B-30-86-3B-83-A4-9D-1B


    40-DE-2D-2D-04-D2-E7-0F-36-FE-F5-39-38-C9-0D-38-40-82-06-
    22-A4-00-B5-D2-59-17-90-81-15-65-1C-89-93-3D-DD-AD-CC-E6-
    FD-4C-28-21-46-0D-B0-E3-87-23-61-28-F3-C8-AB-5C-F8-15-CD-
    B6-6F-84-6B-27-DF-3E-38-98-D0-C5-90-AC-7C-29-E8-50-5C-5D-
    AB-6D-62-2E-A7-B6-BA-36-E0-76-6E-BB-97-33-3D-BB-F0-F9-F7-
    50-B0-F0-5E-2C-38-64-DA-59-02-7B-30-86-3B-83-A4-9D-1B



    [Fact]
    public void DecompressTest2()
    {
        var bytes = new byte[] {
            0x01, 0x00, 0x01, 0x00, 0x52, 0x22, 0x54, 0xB1, 0x96, 0x01, 0x00, 0x00, 0xEF, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xCB, 0x40, 0xAC, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xE0,
            0x07, 0x00, 0x00, 0xAF, 0x17, 0x00, 0x00, 0x70, 0xC0, 0x49, 0x7E, 0x55, 0x24, 0x47, 0x0F, 0x4F, 0xBA, 0xC0, 0x98, 0x32, 0xD2, 0xAC, 0x61, 0xCF, 0x21, 0xA1, 0x5E, 0x21, 0x56, 0x30, 0xD1, 0xAE,
            0x51, 0xEF, 0xA1, 0xA5, 0x59, 0x41, 0xE3, 0xCF, 0x9A, 0x47, 0xE7, 0x7A, 0x78, 0xE5, 0xD3, 0xE3, 0xBF, 0x05, 0x11, 0xA8, 0x70, 0xC1, 0x86, 0x0E, 0xF8, 0x30, 0xC2, 0x8B, 0x19, 0xD4, 0xB8, 0x61,
            0xC7, 0x8F, 0x33, 0x80, 0x20, 0x45, 0x1C, 0x49, 0xC2, 0xA8, 0x72, 0x02, 0x1E, 0x1C, 0x04, 0x09, 0x93, 0x9A, 0x5A, 0x76, 0x42, 0x1B, 0xA4, 0x58, 0x61, 0x1C, 0x95, 0x57, 0x37, 0xD8, 0xE2, 0x41,
            0x0C, 0xFC, 0x61, 0xAD, 0x2A, 0x32, 0x94, 0xC0, 0x89, 0x21, 0x96, 0x34, 0x61, 0xCA, 0x15, 0x59, 0xC2, 0x80, 0x3C, 0x89, 0x64, 0xEA, 0x45, 0xCC, 0x9A, 0x7E, 0x16, 0x0D, 0x04, 0x71, 0x23, 0x3B,
            0xBE, 0xFD, 0x8D, 0xB6, 0xA2, 0x84, 0x24, 0x81, 0xC0, 0x50, 0xBB, 0x40, 0x08, 0x2D, 0xBE, 0xCC, 0x71, 0x60, 0x40, 0x00, 0xF4, 0xED, 0x77, 0x37, 0xD7, 0xBB, 0xAC, 0x6F, 0xA9, 0x18, 0x03, 0xD6,
            0xFA, 0x2A, 0x85, 0x4C, 0xE5, 0x12, 0xA8, 0xB0, 0xE1, 0x4B, 0xF4, 0x40, 0x48, 0xB5, 0x9E, 0xBE, 0xFD, 0xEE, 0xE6, 0x72, 0x2E, 0xFB, 0x23, 0x55, 0x31, 0x06, 0xAC, 0xF5, 0x55, 0x4D, 0x84, 0x82,
            0xEA, 0x08, 0x47, 0x42, 0xA2, 0x04, 0x39, 0x34, 0x30, 0x5A, 0x4F, 0xDF, 0x7E, 0x77, 0x73, 0xA9, 0x83, 0xFB, 0x36, 0x89, 0x18, 0x03, 0xD6, 0xFA, 0x2A, 0x72, 0x6A, 0x6D, 0x90, 0x90, 0x40, 0x88,
            0x4D, 0xC8, 0x48, 0x88, 0x5E, 0xEB, 0xE9, 0xDB, 0xEF, 0x6E, 0x2E, 0xF7, 0x7A, 0x5F, 0x8F, 0x88, 0x31, 0x60, 0xAD, 0xAF, 0x82, 0x2A, 0x56, 0xA4, 0xA3, 0xA9, 0x94, 0x6A, 0x95, 0x28, 0xD3, 0x48,
            0xF6, 0xF4, 0xED, 0x77, 0x37, 0x97, 0x77, 0x39, 0x5F, 0x25, 0x62, 0x0C, 0x58, 0xEB, 0xAB, 0x50, 0xA8, 0xA4, 0xE9, 0xBC, 0x02, 0xCD, 0x64, 0x98, 0x08, 0x49, 0xB5, 0x9E, 0xBE, 0xFD, 0xEE, 0xE6,
            0xF4, 0xA5, 0x3E, 0x0C, 0x22, 0xC6, 0x80, 0xB5, 0xBE, 0x0A, 0x5D, 0x21, 0xA5, 0x0E, 0x2E, 0x3C, 0x04, 0x12, 0x19, 0x52, 0xC8, 0xC8, 0x9E, 0xBE, 0xFD, 0xEE, 0xE6, 0xE0, 0x2F, 0xF7, 0x8F, 0x31,
            0x60, 0x6D, 0xA9, 0x16, 0x58, 0x5B, 0x3A, 0x6A, 0xE0, 0xD8, 0x96, 0x68, 0x46, 0x2C, 0x4B, 0xEB, 0xE9, 0xDB, 0xEF, 0x6E, 0x6E, 0xFB, 0xF2, 0xBE, 0x25, 0x30, 0x06, 0xAC, 0x2D, 0x55, 0x93, 0x74,
            0x0A, 0x1D, 0x08, 0x0A, 0x0D, 0x12, 0x58, 0x88, 0x6C, 0x69, 0x3D, 0x7D, 0xFB, 0xDD, 0xCD, 0xE5, 0x9F, 0xFE, 0xAA, 0x8A, 0x31, 0x60, 0x6D, 0xA9, 0x9A, 0xA4, 0x53, 0xE8, 0x40, 0x50, 0x68, 0x90,
            0xC0, 0x42, 0x64, 0x4B, 0xEB, 0xE9, 0xDB, 0xEF, 0x6E, 0x0E, 0xE1, 0xE0, 0xBF, 0xBE, 0x8A, 0x31, 0x60, 0x6D, 0xA9, 0xA0, 0x8A, 0x15, 0xE9, 0x68, 0x2A, 0xA5, 0x5A, 0x25, 0xCA, 0x34, 0x92, 0x3D,
            0x7D, 0xFB, 0xDD, 0xCD, 0x21, 0xDE, 0xF6, 0xB7, 0x54, 0x8C, 0x01, 0x6B, 0x4B, 0xA5, 0x90, 0xA9, 0x5C, 0x02, 0x15, 0x36, 0x7C, 0x89, 0x1E, 0x08, 0xA9, 0xD6, 0xD3, 0xB7, 0xDF, 0xDD, 0x1C, 0x5F,
            0xFE, 0x47, 0xAA, 0x62, 0x0C, 0x58, 0x5B, 0x2A, 0x1C, 0x05, 0xB6, 0x75, 0x94, 0x88, 0x09, 0xD3, 0xC9, 0x26, 0x89, 0x64, 0xB2, 0xA7, 0x6F, 0xBF, 0xBB, 0x39, 0xA4, 0x43, 0xF8, 0x36, 0x89, 0x18,
            0x03, 0xD6, 0x96, 0xEA, 0x34, 0xC8, 0xD7, 0x51, 0xA7, 0x54, 0x4E, 0x86, 0xA6, 0x50, 0x4A, 0xEB, 0xE9, 0xDB, 0xEF, 0x6E, 0x0E, 0xF9, 0x10, 0xBF, 0x1E, 0x11, 0x63, 0xC0, 0xDA, 0x52, 0x41, 0x15,
            0x2B, 0xD2, 0xD1, 0x54, 0x4A, 0xB5, 0x4A, 0x94, 0x69, 0x24, 0x7B, 0xFA, 0xF6, 0xBB, 0x9B, 0x93, 0x8F, 0xBF, 0x4A, 0xC4, 0x18, 0xB0, 0xB6, 0x54, 0x28, 0x54, 0xD2, 0x74, 0x5E, 0x81, 0x66, 0x32,
            0x4C, 0x84, 0xA4, 0x5A, 0x4F, 0xDF, 0x7E, 0x77, 0x73, 0xED, 0x21, 0x7D, 0x18, 0x44, 0x8C, 0x01, 0x6B, 0x4B, 0x85, 0xAE, 0x90, 0x52, 0x07, 0x17, 0x1E, 0x02, 0x89, 0x0C, 0x29, 0x64, 0x64, 0xCF,
            0x2F, 0xEE, 0x6E, 0xEE, 0x4F, 0xFD, 0xFE, 0xFC, 0xE2, 0xEE, 0xE6, 0xFE, 0x36, 0xDE, 0xC6, 0xF3, 0x8B, 0xBB, 0x9B, 0xFB, 0xB3, 0xBB, 0xF3, 0x8B, 0xBB, 0x9B, 0xFB, 0xB3, 0x9B, 0xF3, 0x8B, 0xBB,
            0x9B, 0xFB, 0xB3, 0xA3, 0x74, 0x7E, 0x71, 0x77, 0x73, 0x7F, 0x76, 0xEA, 0xE7, 0x17, 0x77, 0x37, 0xF7, 0x67, 0x67, 0xE7, 0x17, 0x77, 0x37, 0xF7, 0x67, 0x47, 0xF9, 0xFC, 0xE2, 0xEE, 0xE6, 0xFE,
            0xEC, 0xA4, 0xE7, 0x17, 0x77, 0x37, 0xF7, 0x67, 0x47, 0xE5, 0xFC, 0xE2, 0xEE, 0xE6, 0xFE, 0xEC, 0xA8, 0x9E, 0x5F, 0xDC, 0xDD, 0xDC, 0x9F, 0x5D, 0xDA, 0xF9, 0xC5, 0xDD, 0xCD, 0xFD, 0xD9, 0x51,
            0x3B, 0xBF, 0xB8, 0xBB, 0xB9, 0x3F, 0x3B, 0xEA, 0xE7, 0x17, 0x77, 0x37, 0xF7, 0x67, 0x47, 0xE3, 0xFC, 0xE2, 0xEE, 0xE6, 0xFE, 0xEC, 0x36, 0xCF, 0x2F, 0xEE, 0x6E, 0xEE, 0xCF, 0x8E, 0xE6, 0xF9,
            0xC5, 0xDD, 0xCD, 0xFD, 0xD9, 0xA5, 0x9F, 0x5F, 0xDC, 0xDD, 0xDC, 0x9F, 0x5D, 0xC6
        };

        var packet = new Packet(2048);
        packet.FromBytes(bytes, 0, bytes.Length);

        Huffman.Decode(packet);

        Assert.Fail(BitConverter.ToString(packet.GetPacket().ToArray()));
    }
    */
}