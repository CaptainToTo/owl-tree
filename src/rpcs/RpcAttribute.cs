
using System.Reflection;
using PostSharp.Aspects;
using PostSharp.Serialization;

namespace OwlTree
{
    /// <summary>
    /// Who is allowed to call the RPC.
    /// </summary>
    public enum RpcPerms
    {
        /// <summary>
        /// Only the server is allowed to call this RPC, meaning it will be executed on clients.
        /// </summary>
        Server,
        /// <summary>
        /// Only clients are allowed to call this RPC, meaning it will be executed on the server.
        /// </summary>
        Client,
        /// <summary>
        /// Both clients and the server are allowed to call this RPC.
        /// </summary>
        Any
    }

    /// <summary>
    /// Provides the callee the ClientId of the caller.
    /// </summary>
    [AttributeUsage(AttributeTargets.Parameter)]
    public class RpcCallerAttribute : Attribute { }

    /// <summary>
    /// Provides the caller a way to specify a specific client as the callee.
    /// </summary>
    [AttributeUsage(AttributeTargets.Parameter)]
    public class RpcCalleeAttribute : Attribute { }

    /// <summary>
    /// By default, protocol Ids are generated by hashing method and class names.
    /// Override this by providing a specific string to use in hashing instead.
    /// </summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
    public class RpcHashAttribute : Attribute 
    { 
        public string key = "";
        public RpcHashAttribute(string key)
        {
            this.key = key;
        }
    }

    /// <summary>
    /// Tag a method as an RPC. All parameters must be encodable as a byte array, and the return type must be void.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method), PSerializable]
    public class RpcAttribute : OnMethodBoundaryAspect
    {
        public RpcPerms caller = RpcPerms.Any;

        /// <summary>
        /// Tag a method as an RPC. All parameters must be encodable as a byte array, and the return type must be void.
        /// </summary>
        public RpcAttribute(RpcPerms caller)
        {
            this.caller = caller;
        }

        private static Dictionary<MethodInfo, RpcProtocol> _protocolsByMethod = new Dictionary<MethodInfo, RpcProtocol>();
        private static Dictionary<byte, RpcProtocol> _protocolsById = new Dictionary<byte, RpcProtocol>();

        Type netObjType = typeof(NetworkObject);

        public static void GenerateRpcProtocols()
        {
            var types = NetworkObject.GetNetworkObjectTypes().ToArray();

            Console.WriteLine(types.Length.ToString() + " network object types ");

            foreach (var t in types)
            {
                var rpcs = t.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                            .Where(m => m.Name.ToLower().Contains("rpc"))
                            .ToArray();
                
                foreach (var rpc in rpcs)
                {
                    if (rpc.ReturnType != typeof(void))
                        throw new InvalidOperationException("RPC return types must be void.");

                    var args = rpc.GetParameters();
                    Type[] paramTypes = new Type[args.Length];

                    Console.WriteLine(rpc.Name + ":");
                    for (int i = 0; i < args.Length; i++)
                    {
                        var arg = args[i];
                        Console.WriteLine("    " + arg.ParameterType.FullName + " " + arg.Name);

                        if (!RpcProtocol.IsEncodableParam(arg))
                            throw new ArgumentException("All arguments must be convertible to a byte array.");
                        
                        paramTypes[i] = arg.ParameterType;
                    }

                    var protocol = new RpcProtocol(t, rpc, paramTypes);
                    _protocolsByMethod.Add(rpc, protocol);
                    _protocolsById.Add(protocol.Id, protocol);
                }
            }

        }

        public override void OnEntry(MethodExecutionArgs args)
        {
            if (!netObjType.IsAssignableFrom(args.Instance.GetType()))
                throw new InvalidOperationException("RPCs cannot be called on non-NetworkObjects.");
            
            var netObj = (NetworkObject)args.Instance;

            if (!netObj.IsActive)
                throw new InvalidOperationException("RPCs can only be called on active network objects.");

            if (netObj.Connection == null)
                throw new InvalidOperationException("RPCs can only be called on an active connection.");
            
            var method = args.Method as MethodInfo;

            if (method == null)
                throw new InvalidOperationException("RPC does not exist");

            if (!_protocolsByMethod.ContainsKey(method))
                throw new InvalidOperationException("RPC protocol does not exist.");

            var bytes = _protocolsByMethod[method].Encode(netObj, args.Arguments.ToArray());
            netObj.Connection.Write(bytes);

            args.FlowBehavior = FlowBehavior.Return;
        }

        public static object?[] DecodeRpc(byte[] bytes, out RpcProtocol protocol)
        {
            int ind = 0;
            protocol = _protocolsById[bytes[0]];
            return _protocolsById[bytes[0]].Decode(bytes, ref ind);
        }
    }
}