

using System;

namespace OwlTree
{
    /// <summary>
    /// Responsible for generating network object proxies that will handle RPC send & recv logic.
    /// Proxies are generated by OwlTree compiler step.
    /// </summary>
    public partial class ProxyFactory
    {
        // set by GenerateProxy to "return" the new proxy. Done this way because non-void methods can't be left as hanging partials.
        public NetworkObject _newProxy;

        /// <summary>
        /// Creates a new proxy that wraps the given NetworkObject instance.
        /// </summary>
        public T CreateProxy<T>(T instance) where T : NetworkObject
        {
            GenerateProxy(this, instance);
            return (T)_newProxy;
        }
        
        /// <summary>
        /// Generated by OwlTree compiler step. Each app specific NetworkObject type is 
        /// generated a matching proxy type, which will be instantiated, and wrapped around
        /// the given instance.
        /// </summary>
        static partial void GenerateProxy<T>(ProxyFactory target, T instance);
    }
}