

using System;

namespace OwlTree
{
    /// <summary>
    /// Responsible for generating network object proxies that will handle RPC send & recv logic.
    /// Proxies and proxy factories are generated by OwlTree compiler step.
    /// </summary>
    public abstract class ProxyFactory
    {
        /// <summary>
        /// Creates a new proxy that wraps the given NetworkObject instance.
        /// </summary>
        public abstract T CreateProxy<T>(T instance) where T : NetworkObject;

        /// <summary>
        /// Gets the id of the network object type.
        /// </summary>
        public abstract byte TypeId(Type t);

        /// <summary>
        /// Returns true if the given type has an assigned id.
        /// </summary>
        public abstract bool HasTypeId(Type t);

        /// <summary>
        /// Gets the network object type from the given id.
        /// </summary>
        public abstract Type TypeFromId(byte id);
        
        /// <summary>
        /// Used to created the proxy factory generated for this app.
        /// </summary>
        public static Type AssignedProxyFactory = typeof(ProxyFactoryDefault);
    }

    internal class ProxyFactoryDefault : ProxyFactory
    {
        public override T CreateProxy<T>(T instance)
        {
            throw new NotImplementedException();
        }

        public override bool HasTypeId(Type t)
        {
            throw new NotImplementedException();
        }

        public override Type TypeFromId(byte id)
        {
            throw new NotImplementedException();
        }

        public override byte TypeId(Type t)
        {
            throw new NotImplementedException();
        }
    }
}