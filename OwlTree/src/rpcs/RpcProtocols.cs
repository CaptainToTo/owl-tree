
using System;
using System.Linq;
using System.Text;

namespace OwlTree
{
    /// <summary>
    /// Contains the protocols for each RPC is the application project, and helpers for encoding and decoding RPCs.
    /// Protocols are generated by OwlTree source generator.
    /// </summary>
    public abstract class RpcProtocols
    {
        // TODO: remove reflection usage
        /// <summary>
        /// Gets the specific project implementation.
        /// </summary>
        public static RpcProtocols GetProjectImplementation()
        {
            return (RpcProtocols)Activator.CreateInstance(
                AppDomain.CurrentDomain.GetAssemblies()
                    .SelectMany(a => a.GetTypes())
                    .Where(t => t.IsClass && !t.IsAbstract && typeof(RpcProtocols).IsAssignableFrom(t)).FirstOrDefault()
                );
        }

        // overrides generated at compile time ==

        /// <summary>
        /// Returns the parameter types associated with the given RPC id value.
        /// </summary>
        public abstract Type[] GetProtocol(uint id);

        /// <summary>
        /// Returns the name of the method associated with the given RPC id value.
        /// </summary>
        public abstract string GetRpcName(uint id);

        // ======================================

        public string GetProtocolSummary(RpcId id, Type[] parameters)
        {
            string title = GetRpcName(id.Id) + " " + id + ":\n";
            var encoding = new StringBuilder();
            encoding.Append("  Bytes: [ RpcId:")
                .Append(RpcId.MaxLength())
                .Append("b ][ NetId:")
                .Append(NetworkId.MaxLength())
                .Append("b ]");
            var paramStr = new StringBuilder();

            int maxSize = RpcId.MaxLength() + NetworkId.MaxLength();

            for (int i = 0; i < parameters.Length; i++)
            {
                var param = parameters[i];

            }

            return encoding.Insert(0, title).Append(" = ").Append(maxSize).Append(" max bytes\n")
                .Append(paramStr).ToString();
        }
    }
}